package tests;

import java.util.concurrent.TimeUnit;
import org.openqa.selenium.By;
import org.testng.Assert;
import org.testng.annotations.*;
import org.testng.asserts.SoftAssert;
import objects.LogIn;
import objects.SignUp;
import utility.ExcelUtils;

public class TestLogIn extends TestWebDriverSet{

	public static String expectedNotification;
	public static String actualNotification;

	// check if valid page is opened
	@Test(priority = 0)
	public void openingLogInPage() {
		LogIn.openLogInPage(wd);
		String actualURL = wd.getCurrentUrl();
		String expectedURL = LogIn.getLogInUrl();

		Assert.assertTrue(expectedURL.contains(actualURL));
	}

	// check if registration can be skipped (log in with unregistered or nonexistent username and password)
	@Test(priority = 1)
	public void insertUnregisteredData() {
		wd.findElement(By.xpath(LogIn.getLogInBtnXpath())).click();
		SoftAssert sa = new SoftAssert();
		sa.assertEquals(wd.getCurrentUrl(), LogIn.getLogInUrl());
		expectedNotification = "Missing username or password.";
		actualNotification = wd.findElement(By.xpath(LogIn.getNOTIFICATION_MISSING_XPATH())).getText();
		sa.assertEquals(expectedNotification, actualNotification);

		wd.navigate().to(LogIn.getLogInUrl());
		LogIn.logIn(wd, "pera", "");
		sa.assertEquals(wd.getCurrentUrl(), LogIn.getLogInUrl());
		expectedNotification = "Missing username or password.";
		actualNotification = wd.findElement(By.xpath(LogIn.getNOTIFICATION_MISSING_XPATH())).getText();
		sa.assertEquals(expectedNotification, actualNotification);
		
		wd.navigate().to(LogIn.getLogInUrl());
		LogIn.logIn(wd, "", "pera123");
		sa.assertEquals(wd.getCurrentUrl(), LogIn.getLogInUrl());
		expectedNotification = "Missing username or password.";
		actualNotification = wd.findElement(By.xpath(LogIn.getNOTIFICATION_MISSING_XPATH())).getText();
		sa.assertEquals(expectedNotification, actualNotification);
		
		wd.navigate().to(LogIn.getLogInUrl());
		LogIn.logIn(wd, "Pera", "Pera123");
		sa.assertEquals(wd.getCurrentUrl(), LogIn.getLogInUrl());
		expectedNotification = "Incorrect username or password.";
		actualNotification = wd.findElement(By.xpath(LogIn.getNOTIFICATION_INCORRECT_XPATH())).getText();
		sa.assertEquals(expectedNotification, actualNotification);
		
		sa.assertAll();
	}
	
	// log in one user
	@Test (priority = 2)
	public void logInOneUser() {
		wd.navigate().to(LogIn.getLogInUrl());
		wd.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
		LogIn.logIn(wd, "Jelena10", "jeLena257");
		SoftAssert sa = new SoftAssert();
		String actualURL = wd.getCurrentUrl();
		String expectedURL = SignUp.getLoggedInUrl();
		sa.assertEquals(actualURL, expectedURL);
		String actualAccountUsername = SignUp.accountUsername(wd);
		String expectedAccounUsername = "Jelena10";
		sa.assertEquals(actualAccountUsername, expectedAccounUsername);
		sa.assertAll();
		LogIn.logOut(wd);
	}
	
	// log in 30 users
	@Test (priority = 3)
	public void logInMultipleUsers() {
		ExcelUtils.setExcell("UserAutoGeneratedData.xlsx");
		ExcelUtils.setWorkSheet(0);
		SoftAssert sa = new SoftAssert();
		
		for (int i = 1; i < ExcelUtils.getRowNumber(); i++) {
			wd.navigate().to(LogIn.getLogInUrl());
			wd.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
			LogIn.logIn(wd, ExcelUtils.getDataAt(i, 0), ExcelUtils.getDataAt(i, 2));
			String actualURL = wd.getCurrentUrl();
			String expectedURL = SignUp.getLoggedInUrl();
			sa.assertEquals(actualURL, expectedURL);
			String actualAccountUsername = SignUp.accountUsername(wd);
			String expectedAccounUsername = ExcelUtils.getDataAt(i, 0);
			sa.assertEquals(actualAccountUsername, expectedAccounUsername);
			LogIn.logOut(wd);
		}
		sa.assertAll();
	}	
}
