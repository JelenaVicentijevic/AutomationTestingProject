package tests;

import java.util.concurrent.TimeUnit;
import org.testng.Assert;
import org.testng.annotations.Test;
import org.testng.asserts.SoftAssert;
import objects.LogIn;
import objects.SignUp;
import utility.ExcelUtils;

@Test(groups = { "Registration" })
public class TestSignUp extends TestWebDriverSet{

	// check if valid page is opened
	@Test(priority = 0)
	public void openingSignUpPage() {
		SignUp.openSignUpPage(wd);
		String actualURL = wd.getCurrentUrl();
		String expectedURL = SignUp.getSignUpUrl();
		Assert.assertEquals(actualURL, expectedURL);
	}

	// create one account
	@Test(priority = 2)
	public void createAccount() {
		wd.navigate().to(SignUp.getSignUpUrl());
		SignUp.insertUsername(wd, "jelenaaa456");
		SignUp.insertEmail(wd, "anelej88@mail.rs");
		SignUp.insertPassword(wd, "jeLena257");
		SignUp.confirmPassword(wd, "jeLena257");
		boolean website = SignUp.chooseAboutYou(wd, 1);
		if (website)
			SignUp.insertWebsiteUrl(wd, "website.com");
		SignUp.submitRegistration(wd);

		SoftAssert sa = new SoftAssert();
		String actualURL = wd.getCurrentUrl();
		String expectedURL = SignUp.getLoggedInUrl();

		sa.assertEquals(actualURL, expectedURL);

		String actualAccountUsername = SignUp.accountUsername(wd);
		String expectedAccounUsername = "jelenaaa456";

		sa.assertEquals(actualAccountUsername, expectedAccounUsername);

		sa.assertAll();

		LogIn.logOut(wd);
	}

	// check if registration mandatory fields can be left blank
	@Test(priority = 1)
	public void createAccountWithoutFillingAllFillds() {
		String[] data = { "jelena111", "test@mail.com", "jeLena257", "jeLena257", "1", "website.rs" };
		String[] tempData = new String[6];
		SoftAssert sa = new SoftAssert();

		// all fields are left blank
		SignUp.submitRegistration(wd);
		String actualURL = wd.getCurrentUrl();
		String expectedURL = SignUp.getLoggedInUrl();
		sa.assertNotEquals(actualURL, expectedURL);

		// only one field is left blank
		for (int i = 0; i < data.length; i++) {
			for (int j = 0; j < tempData.length; j++) {
				if (i == j) {
					if (i == 4) {
						tempData[j] = "0";
					} else
						tempData[j] = "";
				} else
					tempData[j] = data[j];
			}
			wd.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
			wd.navigate().to(SignUp.getSignUpUrl());
			SignUp.insertUsername(wd, tempData[0]);
			SignUp.insertEmail(wd, tempData[1]);
			SignUp.insertPassword(wd, tempData[2]);
			SignUp.confirmPassword(wd, tempData[3]);
			SignUp.chooseAboutYou(wd, Integer.parseInt(tempData[4]));
			if (!tempData[4].equals("0"))
				SignUp.insertWebsiteUrl(wd, tempData[5]);
			SignUp.submitRegistration(wd);

			actualURL = wd.getCurrentUrl();
			expectedURL = SignUp.getLoggedInUrl();
			sa.assertNotEquals(actualURL, expectedURL);

		}

		sa.assertAll();
	}

	// register 30 users
	@Test(priority = 3)
	public void createMultipleAccounts() {
		ExcelUtils.setExcell("UserAutoGeneratedData.xlsx");
		ExcelUtils.setWorkSheet(0);

		SoftAssert sa = new SoftAssert();

		for (int i = 1; i < ExcelUtils.getRowNumber(); i++) {

			wd.navigate().to(SignUp.getSignUpUrl());
			wd.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
			SignUp.insertUsername(wd, ExcelUtils.getDataAt(i, 0));
			SignUp.insertEmail(wd, ExcelUtils.getDataAt(i, 1));
			SignUp.insertPassword(wd, ExcelUtils.getDataAt(i, 2));
			SignUp.confirmPassword(wd, ExcelUtils.getDataAt(i, 2));
			boolean website = SignUp.chooseAboutYou(wd, Integer.parseInt(ExcelUtils.getDataAt(i, 3)));
			if (website)
				SignUp.insertWebsiteUrl(wd, "website.com");
			SignUp.submitRegistration(wd);

			String actualURL = wd.getCurrentUrl();
			String expectedURL = SignUp.getLoggedInUrl();

			sa.assertEquals(actualURL, expectedURL);

			String actualAccountUsername = SignUp.accountUsername(wd);
			String expectedAccounUsername = ExcelUtils.getDataAt(i, 0);

			sa.assertEquals(actualAccountUsername, expectedAccounUsername);

			LogIn.logOut(wd);
		}
		sa.assertAll();
	}

}
